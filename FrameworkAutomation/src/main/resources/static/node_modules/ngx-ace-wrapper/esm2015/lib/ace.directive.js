import { __decorate, __param } from "tslib";
import * as ace from 'brace';
import { Directive, Optional, Inject, OnInit, DoCheck, OnDestroy, OnChanges, Input, Output, EventEmitter, NgZone, ElementRef, KeyValueDiffer, KeyValueDiffers, SimpleChanges } from '@angular/core';
import { ACE_CONFIG, AceConfig, AceEditorEvents, AceSelectionEvents } from './ace.interfaces';
let AceDirective = class AceDirective {
    constructor(zone, elementRef, differs, defaults) {
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.defaults = defaults;
        this.instance = null;
        this.configDiff = null;
        this.disabled = false;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.copy = new EventEmitter();
        this.paste = new EventEmitter();
        this.change = new EventEmitter();
        this.changeCursor = new EventEmitter();
        this.changeSession = new EventEmitter();
        this.changeSelection = new EventEmitter();
    }
    ngOnInit() {
        const params = new AceConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        if (this.disabled) {
            params.readOnly = true;
            params.highlightActiveLine = false;
        }
        params.mode = 'ace/mode/' + (params.mode || 'text');
        params.theme = 'ace/theme/' + (params.theme || 'github');
        this.zone.runOutsideAngular(() => {
            this.instance = ace.edit(this.elementRef.nativeElement);
            this.instance.$blockScrolling = Infinity;
            this.instance.setOptions(params);
        });
        // Add native Ace event handling
        AceEditorEvents.forEach((eventName) => {
            if (this.instance) {
                this.instance.on(eventName, (...args) => {
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (this[eventName]) {
                        this.zone.run(() => {
                            if (this[eventName].observers.length) {
                                this[eventName].emit(args);
                            }
                        });
                    }
                });
            }
        });
        // Add native Ace selection event handling
        AceSelectionEvents.forEach((eventName) => {
            if (this.instance) {
                this.instance.selection.on(eventName, (...args) => {
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (this[eventName]) {
                        if (this[eventName].observers.length) {
                            this[eventName].emit(args);
                        }
                    }
                });
            }
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    }
    ngDoCheck() {
        if (this.configDiff) {
            const changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            if (this.instance.isFocused()) {
                this.blur.emit();
            }
            delete this.instance;
            this.instance = null;
        }
    }
    ngOnChanges(changes) {
        if (changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                this.zone.runOutsideAngular(() => {
                    if (this.instance) {
                        const params = new AceConfig(this.defaults);
                        params.assign(this.config); // Custom configuration
                        this.instance.clearSelection();
                        const hlActive = (params.highlightActiveLine == null) ? true : false;
                        this.instance.setHighlightActiveLine(this.disabled ? false : hlActive);
                        this.instance.setReadOnly(this.disabled ? true : (params.readOnly || false));
                    }
                });
            }
        }
    }
    ace() {
        return this.instance;
    }
    clear() {
        if (this.instance) {
            this.instance.setValue('');
            this.instance.clearSelection();
        }
    }
    getValue() {
        if (this.instance) {
            return this.instance.getValue();
        }
    }
    setValue(value, cursorPos) {
        if (this.instance) {
            this.instance.setValue(value || '', cursorPos);
        }
    }
};
AceDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ACE_CONFIG,] }] }
];
__decorate([
    Input()
], AceDirective.prototype, "disabled", void 0);
__decorate([
    Input('ace')
], AceDirective.prototype, "config", void 0);
__decorate([
    Output()
], AceDirective.prototype, "blur", void 0);
__decorate([
    Output()
], AceDirective.prototype, "focus", void 0);
__decorate([
    Output()
], AceDirective.prototype, "copy", void 0);
__decorate([
    Output()
], AceDirective.prototype, "paste", void 0);
__decorate([
    Output()
], AceDirective.prototype, "change", void 0);
__decorate([
    Output()
], AceDirective.prototype, "changeCursor", void 0);
__decorate([
    Output()
], AceDirective.prototype, "changeSession", void 0);
__decorate([
    Output()
], AceDirective.prototype, "changeSelection", void 0);
AceDirective = __decorate([
    Directive({
        selector: '[ace]',
        exportAs: 'ngxAce'
    }),
    __param(3, Optional()), __param(3, Inject(ACE_CONFIG))
], AceDirective);
export { AceDirective };
//# sourceMappingURL=data:application/json;base64,
{"version":3,"sources":["/Users/marcuswiseman/SD/Java/FinalProject/ngFrameworkAutomation/node_modules/ngx-ace-wrapper/fesm2015/ngx-ace-wrapper.js"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8ZAyJE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAqCyB,AAKxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0ZAoDD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAiDiD,AASlC;;;;;;EAGf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAQY","file":"ngx-ace-wrapper.js","sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { edit } from 'brace';\nimport 'brace/mode/text';\nimport 'brace/theme/github';\nimport { InjectionToken, EventEmitter, NgZone, ElementRef, KeyValueDiffers, Optional, Inject, Input, Output, Directive, HostBinding, ViewChild, Component, ViewEncapsulation, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nconst ACE_CONFIG = new InjectionToken('ACE_CONFIG');\nconst AceEditorEvents = [\n    'blur',\n    'focus',\n    'copy',\n    'paste',\n    'change',\n    'changeSession'\n];\nconst AceSelectionEvents = [\n    'changeCursor',\n    'changeSelection'\n];\nclass AceConfig {\n    constructor(config = {}) {\n        this.assign(config);\n    }\n    assign(config = {}, target) {\n        target = target || this;\n        for (const key in config) {\n            if (config[key] && !Array.isArray(config[key]) && typeof config[key] === 'object') {\n                target[key] = {};\n                this.assign(config[key], target[key]);\n            }\n            else {\n                target[key] = config[key];\n            }\n        }\n    }\n}\n\nlet AceDirective = class AceDirective {\n    constructor(zone, elementRef, differs, defaults) {\n        this.zone = zone;\n        this.elementRef = elementRef;\n        this.differs = differs;\n        this.defaults = defaults;\n        this.instance = null;\n        this.configDiff = null;\n        this.disabled = false;\n        this.blur = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.copy = new EventEmitter();\n        this.paste = new EventEmitter();\n        this.change = new EventEmitter();\n        this.changeCursor = new EventEmitter();\n        this.changeSession = new EventEmitter();\n        this.changeSelection = new EventEmitter();\n    }\n    ngOnInit() {\n        const params = new AceConfig(this.defaults);\n        params.assign(this.config); // Custom configuration\n        if (this.disabled) {\n            params.readOnly = true;\n            params.highlightActiveLine = false;\n        }\n        params.mode = 'ace/mode/' + (params.mode || 'text');\n        params.theme = 'ace/theme/' + (params.theme || 'github');\n        this.zone.runOutsideAngular(() => {\n            this.instance = edit(this.elementRef.nativeElement);\n            this.instance.$blockScrolling = Infinity;\n            this.instance.setOptions(params);\n        });\n        // Add native Ace event handling\n        AceEditorEvents.forEach((eventName) => {\n            if (this.instance) {\n                this.instance.on(eventName, (...args) => {\n                    if (args.length === 1) {\n                        args = args[0];\n                    }\n                    if (this[eventName]) {\n                        this.zone.run(() => {\n                            if (this[eventName].observers.length) {\n                                this[eventName].emit(args);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n        // Add native Ace selection event handling\n        AceSelectionEvents.forEach((eventName) => {\n            if (this.instance) {\n                this.instance.selection.on(eventName, (...args) => {\n                    if (args.length === 1) {\n                        args = args[0];\n                    }\n                    if (this[eventName]) {\n                        if (this[eventName].observers.length) {\n                            this[eventName].emit(args);\n                        }\n                    }\n                });\n            }\n        });\n        if (!this.configDiff) {\n            this.configDiff = this.differs.find(this.config || {}).create();\n            this.configDiff.diff(this.config || {});\n        }\n    }\n    ngDoCheck() {\n        if (this.configDiff) {\n            const changes = this.configDiff.diff(this.config || {});\n            if (changes) {\n                this.ngOnDestroy();\n                this.ngOnInit();\n            }\n        }\n    }\n    ngOnDestroy() {\n        if (this.instance) {\n            if (this.instance.isFocused()) {\n                this.blur.emit();\n            }\n            delete this.instance;\n            this.instance = null;\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['disabled']) {\n            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n                this.zone.runOutsideAngular(() => {\n                    if (this.instance) {\n                        const params = new AceConfig(this.defaults);\n                        params.assign(this.config); // Custom configuration\n                        this.instance.clearSelection();\n                        const hlActive = (params.highlightActiveLine == null) ? true : false;\n                        this.instance.setHighlightActiveLine(this.disabled ? false : hlActive);\n                        this.instance.setReadOnly(this.disabled ? true : (params.readOnly || false));\n                    }\n                });\n            }\n        }\n    }\n    ace() {\n        return this.instance;\n    }\n    clear() {\n        if (this.instance) {\n            this.instance.setValue('');\n            this.instance.clearSelection();\n        }\n    }\n    getValue() {\n        if (this.instance) {\n            return this.instance.getValue();\n        }\n    }\n    setValue(value, cursorPos) {\n        if (this.instance) {\n            this.instance.setValue(value || '', cursorPos);\n        }\n    }\n};\nAceDirective.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: KeyValueDiffers },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ACE_CONFIG,] }] }\n];\n__decorate([\n    Input()\n], AceDirective.prototype, \"disabled\", void 0);\n__decorate([\n    Input('ace')\n], AceDirective.prototype, \"config\", void 0);\n__decorate([\n    Output()\n], AceDirective.prototype, \"blur\", void 0);\n__decorate([\n    Output()\n], AceDirective.prototype, \"focus\", void 0);\n__decorate([\n    Output()\n], AceDirective.prototype, \"copy\", void 0);\n__decorate([\n    Output()\n], AceDirective.prototype, \"paste\", void 0);\n__decorate([\n    Output()\n], AceDirective.prototype, \"change\", void 0);\n__decorate([\n    Output()\n], AceDirective.prototype, \"changeCursor\", void 0);\n__decorate([\n    Output()\n], AceDirective.prototype, \"changeSession\", void 0);\n__decorate([\n    Output()\n], AceDirective.prototype, \"changeSelection\", void 0);\nAceDirective = __decorate([\n    Directive({\n        selector: '[ace]',\n        exportAs: 'ngxAce'\n    }),\n    __param(3, Optional()), __param(3, Inject(ACE_CONFIG))\n], AceDirective);\n\nlet AceComponent = class AceComponent {\n    constructor() {\n        this.content = '';\n        this.disabled = false;\n        this.mode = '';\n        this.theme = '';\n        this.useAceClass = true;\n        this.blur = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.copy = new EventEmitter();\n        this.paste = new EventEmitter();\n        this.change = new EventEmitter();\n        this.valueChange = new EventEmitter();\n        this.changeCursor = new EventEmitter();\n        this.changeSession = new EventEmitter();\n        this.changeSelection = new EventEmitter();\n    }\n    get value() {\n        return this.content;\n    }\n    set value(value) {\n        this.setContent(value);\n    }\n    ngAfterViewInit() {\n        if (this.content != null) {\n            this.setContent(this.content, true);\n        }\n    }\n    setContent(value, force) {\n        if (force || value !== this.content) {\n            if (this.directiveRef) {\n                this.directiveRef.setValue(value, 1);\n            }\n            this.content = value;\n        }\n    }\n    getConfig() {\n        this.config = this.config || {};\n        this.config.mode = this.mode || this.config.mode;\n        this.config.theme = this.theme || this.config.theme;\n        return this.config;\n    }\n    onContentChange(event) {\n        if (this.directiveRef) {\n            this.change.emit(event);\n            this.content = this.directiveRef.getValue() || '';\n            this.valueChange.emit(this.value);\n        }\n    }\n};\n__decorate([\n    Input()\n], AceComponent.prototype, \"value\", null);\n__decorate([\n    Input()\n], AceComponent.prototype, \"disabled\", void 0);\n__decorate([\n    Input()\n], AceComponent.prototype, \"mode\", void 0);\n__decorate([\n    Input()\n], AceComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input()\n], AceComponent.prototype, \"config\", void 0);\n__decorate([\n    HostBinding('class.ace'),\n    Input()\n], AceComponent.prototype, \"useAceClass\", void 0);\n__decorate([\n    Output()\n], AceComponent.prototype, \"blur\", void 0);\n__decorate([\n    Output()\n], AceComponent.prototype, \"focus\", void 0);\n__decorate([\n    Output()\n], AceComponent.prototype, \"copy\", void 0);\n__decorate([\n    Output()\n], AceComponent.prototype, \"paste\", void 0);\n__decorate([\n    Output()\n], AceComponent.prototype, \"change\", void 0);\n__decorate([\n    Output()\n], AceComponent.prototype, \"valueChange\", void 0);\n__decorate([\n    Output()\n], AceComponent.prototype, \"changeCursor\", void 0);\n__decorate([\n    Output()\n], AceComponent.prototype, \"changeSession\", void 0);\n__decorate([\n    Output()\n], AceComponent.prototype, \"changeSelection\", void 0);\n__decorate([\n    ViewChild(AceDirective, { static: true })\n], AceComponent.prototype, \"directiveRef\", void 0);\nAceComponent = __decorate([\n    Component({\n        selector: 'ace',\n        exportAs: 'ngxAce',\n        template: \"<div [ace]=\\\"getConfig()\\\" [disabled]=\\\"disabled\\\" (blur)=\\\"blur.emit($event)\\\" (focus)=\\\"focus.emit($event)\\\" (copy)=\\\"copy.emit($event)\\\" (paste)=\\\"paste.emit($event)\\\" (change)=\\\"onContentChange($event)\\\" (changeCursor)=\\\"changeCursor.emit($event)\\\" (changeSession)=\\\"changeSession.emit($event)\\\" (changeSelection)=\\\"changeSelection.emit($event)\\\">\\n</div>\\n\",\n        encapsulation: ViewEncapsulation.None,\n        styles: [\".ace,.ace>.ace_editor{display:block;width:100%;height:100%}.ace[fxflex]{display:-webkit-box;display:flex;flex-direction:inherit;-webkit-box-align:inherit;align-items:inherit;min-width:0;min-height:0;-webkit-box-direction:inherit;-webkit-box-orient:inherit}.ace[fxflex]>.ace_editor{flex:1 1 auto;min-width:0;min-height:0;-webkit-box-flex:1}\"]\n    })\n], AceComponent);\n\nlet AceModule = class AceModule {\n};\nAceModule = __decorate([\n    NgModule({\n        declarations: [AceComponent, AceDirective],\n        imports: [CommonModule],\n        exports: [CommonModule, AceComponent, AceDirective],\n        providers: []\n    })\n], AceModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ACE_CONFIG, AceComponent, AceConfig, AceDirective, AceModule };\n"]}
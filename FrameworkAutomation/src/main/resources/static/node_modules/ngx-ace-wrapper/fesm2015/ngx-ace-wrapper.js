import { __decorate, __param } from 'tslib';
import { edit } from 'brace';
import 'brace/mode/text';
import 'brace/theme/github';
import { InjectionToken, EventEmitter, NgZone, ElementRef, KeyValueDiffers, Optional, Inject, Input, Output, Directive, HostBinding, ViewChild, Component, ViewEncapsulation, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

const ACE_CONFIG = new InjectionToken('ACE_CONFIG');
const AceEditorEvents = [
    'blur',
    'focus',
    'copy',
    'paste',
    'change',
    'changeSession'
];
const AceSelectionEvents = [
    'changeCursor',
    'changeSelection'
];
class AceConfig {
    constructor(config = {}) {
        this.assign(config);
    }
    assign(config = {}, target) {
        target = target || this;
        for (const key in config) {
            if (config[key] && !Array.isArray(config[key]) && typeof config[key] === 'object') {
                target[key] = {};
                this.assign(config[key], target[key]);
            }
            else {
                target[key] = config[key];
            }
        }
    }
}

let AceDirective = class AceDirective {
    constructor(zone, elementRef, differs, defaults) {
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.defaults = defaults;
        this.instance = null;
        this.configDiff = null;
        this.disabled = false;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.copy = new EventEmitter();
        this.paste = new EventEmitter();
        this.change = new EventEmitter();
        this.changeCursor = new EventEmitter();
        this.changeSession = new EventEmitter();
        this.changeSelection = new EventEmitter();
    }
    ngOnInit() {
        const params = new AceConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        if (this.disabled) {
            params.readOnly = true;
            params.highlightActiveLine = false;
        }
        params.mode = 'ace/mode/' + (params.mode || 'text');
        params.theme = 'ace/theme/' + (params.theme || 'github');
        this.zone.runOutsideAngular(() => {
            this.instance = edit(this.elementRef.nativeElement);
            this.instance.$blockScrolling = Infinity;
            this.instance.setOptions(params);
        });
        // Add native Ace event handling
        AceEditorEvents.forEach((eventName) => {
            if (this.instance) {
                this.instance.on(eventName, (...args) => {
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (this[eventName]) {
                        this.zone.run(() => {
                            if (this[eventName].observers.length) {
                                this[eventName].emit(args);
                            }
                        });
                    }
                });
            }
        });
        // Add native Ace selection event handling
        AceSelectionEvents.forEach((eventName) => {
            if (this.instance) {
                this.instance.selection.on(eventName, (...args) => {
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (this[eventName]) {
                        if (this[eventName].observers.length) {
                            this[eventName].emit(args);
                        }
                    }
                });
            }
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    }
    ngDoCheck() {
        if (this.configDiff) {
            const changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            if (this.instance.isFocused()) {
                this.blur.emit();
            }
            delete this.instance;
            this.instance = null;
        }
    }
    ngOnChanges(changes) {
        if (changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                this.zone.runOutsideAngular(() => {
                    if (this.instance) {
                        const params = new AceConfig(this.defaults);
                        params.assign(this.config); // Custom configuration
                        this.instance.clearSelection();
                        const hlActive = (params.highlightActiveLine == null) ? true : false;
                        this.instance.setHighlightActiveLine(this.disabled ? false : hlActive);
                        this.instance.setReadOnly(this.disabled ? true : (params.readOnly || false));
                    }
                });
            }
        }
    }
    ace() {
        return this.instance;
    }
    clear() {
        if (this.instance) {
            this.instance.setValue('');
            this.instance.clearSelection();
        }
    }
    getValue() {
        if (this.instance) {
            return this.instance.getValue();
        }
    }
    setValue(value, cursorPos) {
        if (this.instance) {
            this.instance.setValue(value || '', cursorPos);
        }
    }
};
AceDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ACE_CONFIG,] }] }
];
__decorate([
    Input()
], AceDirective.prototype, "disabled", void 0);
__decorate([
    Input('ace')
], AceDirective.prototype, "config", void 0);
__decorate([
    Output()
], AceDirective.prototype, "blur", void 0);
__decorate([
    Output()
], AceDirective.prototype, "focus", void 0);
__decorate([
    Output()
], AceDirective.prototype, "copy", void 0);
__decorate([
    Output()
], AceDirective.prototype, "paste", void 0);
__decorate([
    Output()
], AceDirective.prototype, "change", void 0);
__decorate([
    Output()
], AceDirective.prototype, "changeCursor", void 0);
__decorate([
    Output()
], AceDirective.prototype, "changeSession", void 0);
__decorate([
    Output()
], AceDirective.prototype, "changeSelection", void 0);
AceDirective = __decorate([
    Directive({
        selector: '[ace]',
        exportAs: 'ngxAce'
    }),
    __param(3, Optional()), __param(3, Inject(ACE_CONFIG))
], AceDirective);

let AceComponent = class AceComponent {
    constructor() {
        this.content = '';
        this.disabled = false;
        this.mode = '';
        this.theme = '';
        this.useAceClass = true;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.copy = new EventEmitter();
        this.paste = new EventEmitter();
        this.change = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.changeCursor = new EventEmitter();
        this.changeSession = new EventEmitter();
        this.changeSelection = new EventEmitter();
    }
    get value() {
        return this.content;
    }
    set value(value) {
        this.setContent(value);
    }
    ngAfterViewInit() {
        if (this.content != null) {
            this.setContent(this.content, true);
        }
    }
    setContent(value, force) {
        if (force || value !== this.content) {
            if (this.directiveRef) {
                this.directiveRef.setValue(value, 1);
            }
            this.content = value;
        }
    }
    getConfig() {
        this.config = this.config || {};
        this.config.mode = this.mode || this.config.mode;
        this.config.theme = this.theme || this.config.theme;
        return this.config;
    }
    onContentChange(event) {
        if (this.directiveRef) {
            this.change.emit(event);
            this.content = this.directiveRef.getValue() || '';
            this.valueChange.emit(this.value);
        }
    }
};
__decorate([
    Input()
], AceComponent.prototype, "value", null);
__decorate([
    Input()
], AceComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], AceComponent.prototype, "mode", void 0);
__decorate([
    Input()
], AceComponent.prototype, "theme", void 0);
__decorate([
    Input()
], AceComponent.prototype, "config", void 0);
__decorate([
    HostBinding('class.ace'),
    Input()
], AceComponent.prototype, "useAceClass", void 0);
__decorate([
    Output()
], AceComponent.prototype, "blur", void 0);
__decorate([
    Output()
], AceComponent.prototype, "focus", void 0);
__decorate([
    Output()
], AceComponent.prototype, "copy", void 0);
__decorate([
    Output()
], AceComponent.prototype, "paste", void 0);
__decorate([
    Output()
], AceComponent.prototype, "change", void 0);
__decorate([
    Output()
], AceComponent.prototype, "valueChange", void 0);
__decorate([
    Output()
], AceComponent.prototype, "changeCursor", void 0);
__decorate([
    Output()
], AceComponent.prototype, "changeSession", void 0);
__decorate([
    Output()
], AceComponent.prototype, "changeSelection", void 0);
__decorate([
    ViewChild(AceDirective, { static: true })
], AceComponent.prototype, "directiveRef", void 0);
AceComponent = __decorate([
    Component({
        selector: 'ace',
        exportAs: 'ngxAce',
        template: "<div [ace]=\"getConfig()\" [disabled]=\"disabled\" (blur)=\"blur.emit($event)\" (focus)=\"focus.emit($event)\" (copy)=\"copy.emit($event)\" (paste)=\"paste.emit($event)\" (change)=\"onContentChange($event)\" (changeCursor)=\"changeCursor.emit($event)\" (changeSession)=\"changeSession.emit($event)\" (changeSelection)=\"changeSelection.emit($event)\">\n</div>\n",
        encapsulation: ViewEncapsulation.None,
        styles: [".ace,.ace>.ace_editor{display:block;width:100%;height:100%}.ace[fxflex]{display:-webkit-box;display:flex;flex-direction:inherit;-webkit-box-align:inherit;align-items:inherit;min-width:0;min-height:0;-webkit-box-direction:inherit;-webkit-box-orient:inherit}.ace[fxflex]>.ace_editor{flex:1 1 auto;min-width:0;min-height:0;-webkit-box-flex:1}"]
    })
], AceComponent);

let AceModule = class AceModule {
};
AceModule = __decorate([
    NgModule({
        declarations: [AceComponent, AceDirective],
        imports: [CommonModule],
        exports: [CommonModule, AceComponent, AceDirective],
        providers: []
    })
], AceModule);

/**
 * Generated bundle index. Do not edit.
 */

export { ACE_CONFIG, AceComponent, AceConfig, AceDirective, AceModule };
//# sourceMappingURL=ngx-ace-wrapper.js.map

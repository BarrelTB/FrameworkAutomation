import { __decorate } from "tslib";
import 'brace';
import 'brace/mode/text';
import 'brace/theme/github';
import { Component, Input, Output, EventEmitter, ViewChild, HostBinding, ViewEncapsulation } from '@angular/core';
import { AceDirective } from './ace.directive';
var AceComponent = /** @class */ (function () {
    function AceComponent() {
        this.content = '';
        this.disabled = false;
        this.mode = '';
        this.theme = '';
        this.useAceClass = true;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.copy = new EventEmitter();
        this.paste = new EventEmitter();
        this.change = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.changeCursor = new EventEmitter();
        this.changeSession = new EventEmitter();
        this.changeSelection = new EventEmitter();
    }
    Object.defineProperty(AceComponent.prototype, "value", {
        get: function () {
            return this.content;
        },
        set: function (value) {
            this.setContent(value);
        },
        enumerable: true,
        configurable: true
    });
    AceComponent.prototype.ngAfterViewInit = function () {
        if (this.content != null) {
            this.setContent(this.content, true);
        }
    };
    AceComponent.prototype.setContent = function (value, force) {
        if (force || value !== this.content) {
            if (this.directiveRef) {
                this.directiveRef.setValue(value, 1);
            }
            this.content = value;
        }
    };
    AceComponent.prototype.getConfig = function () {
        this.config = this.config || {};
        this.config.mode = this.mode || this.config.mode;
        this.config.theme = this.theme || this.config.theme;
        return this.config;
    };
    AceComponent.prototype.onContentChange = function (event) {
        if (this.directiveRef) {
            this.change.emit(event);
            this.content = this.directiveRef.getValue() || '';
            this.valueChange.emit(this.value);
        }
    };
    __decorate([
        Input()
    ], AceComponent.prototype, "value", null);
    __decorate([
        Input()
    ], AceComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], AceComponent.prototype, "mode", void 0);
    __decorate([
        Input()
    ], AceComponent.prototype, "theme", void 0);
    __decorate([
        Input()
    ], AceComponent.prototype, "config", void 0);
    __decorate([
        HostBinding('class.ace'),
        Input()
    ], AceComponent.prototype, "useAceClass", void 0);
    __decorate([
        Output()
    ], AceComponent.prototype, "blur", void 0);
    __decorate([
        Output()
    ], AceComponent.prototype, "focus", void 0);
    __decorate([
        Output()
    ], AceComponent.prototype, "copy", void 0);
    __decorate([
        Output()
    ], AceComponent.prototype, "paste", void 0);
    __decorate([
        Output()
    ], AceComponent.prototype, "change", void 0);
    __decorate([
        Output()
    ], AceComponent.prototype, "valueChange", void 0);
    __decorate([
        Output()
    ], AceComponent.prototype, "changeCursor", void 0);
    __decorate([
        Output()
    ], AceComponent.prototype, "changeSession", void 0);
    __decorate([
        Output()
    ], AceComponent.prototype, "changeSelection", void 0);
    __decorate([
        ViewChild(AceDirective, { static: true })
    ], AceComponent.prototype, "directiveRef", void 0);
    AceComponent = __decorate([
        Component({
            selector: 'ace',
            exportAs: 'ngxAce',
            template: "<div [ace]=\"getConfig()\" [disabled]=\"disabled\" (blur)=\"blur.emit($event)\" (focus)=\"focus.emit($event)\" (copy)=\"copy.emit($event)\" (paste)=\"paste.emit($event)\" (change)=\"onContentChange($event)\" (changeCursor)=\"changeCursor.emit($event)\" (changeSession)=\"changeSession.emit($event)\" (changeSelection)=\"changeSelection.emit($event)\">\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            styles: [".ace,.ace>.ace_editor{display:block;width:100%;height:100%}.ace[fxflex]{display:-webkit-box;display:flex;flex-direction:inherit;-webkit-box-align:inherit;align-items:inherit;min-width:0;min-height:0;-webkit-box-direction:inherit;-webkit-box-orient:inherit}.ace[fxflex]>.ace_editor{flex:1 1 auto;min-width:0;min-height:0;-webkit-box-flex:1}"]
        })
    ], AceComponent);
    return AceComponent;
}());
export { AceComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hY2Utd3JhcHBlci8iLCJzb3VyY2VzIjpbImxpYi9hY2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLE9BQU8sQ0FBQztBQUVmLE9BQU8saUJBQWlCLENBQUM7QUFDekIsT0FBTyxvQkFBb0IsQ0FBQztBQUU1QixPQUFPLEVBQUUsU0FBUyxFQUNELEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUMxQyxTQUFTLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5FLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVUvQztJQXFDRTtRQXBDUSxZQUFPLEdBQVcsRUFBRSxDQUFDO1FBVXBCLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFFMUIsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUNsQixVQUFLLEdBQVcsRUFBRSxDQUFDO1FBS25CLGdCQUFXLEdBQVksSUFBSSxDQUFDO1FBRTNCLFNBQUksR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQy9CLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRWhDLFNBQUksR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQy9CLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRWhDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRWpDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUV6QyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDdkMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3hDLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUlyQyxDQUFDO0lBakNoQixzQkFBSSwrQkFBSzthQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7YUFDRCxVQUFVLEtBQWE7WUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixDQUFDOzs7T0FIQTtJQWlDRCxzQ0FBZSxHQUFmO1FBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDO0lBRU8saUNBQVUsR0FBbEIsVUFBbUIsS0FBYSxFQUFFLEtBQWU7UUFDL0MsSUFBSSxLQUFLLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDbkMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDdEM7WUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFTSxnQ0FBUyxHQUFoQjtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFFaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUVqRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBRXBELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRU0sc0NBQWUsR0FBdEIsVUFBdUIsS0FBVTtRQUMvQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUVsRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBckVEO1FBREMsS0FBSyxFQUFFOzZDQUdQO0lBS1E7UUFBUixLQUFLLEVBQUU7a0RBQTJCO0lBRTFCO1FBQVIsS0FBSyxFQUFFOzhDQUFtQjtJQUNsQjtRQUFSLEtBQUssRUFBRTsrQ0FBb0I7SUFFbkI7UUFBUixLQUFLLEVBQUU7Z0RBQTZCO0lBRzVCO1FBRFIsV0FBVyxDQUFDLFdBQVcsQ0FBQztRQUN4QixLQUFLLEVBQUU7cURBQTZCO0lBRTNCO1FBQVQsTUFBTSxFQUFFOzhDQUFnQztJQUMvQjtRQUFULE1BQU0sRUFBRTsrQ0FBaUM7SUFFaEM7UUFBVCxNQUFNLEVBQUU7OENBQWdDO0lBQy9CO1FBQVQsTUFBTSxFQUFFOytDQUFpQztJQUVoQztRQUFULE1BQU0sRUFBRTtnREFBa0M7SUFFakM7UUFBVCxNQUFNLEVBQUU7cURBQTBDO0lBRXpDO1FBQVQsTUFBTSxFQUFFO3NEQUF3QztJQUN2QztRQUFULE1BQU0sRUFBRTt1REFBeUM7SUFDeEM7UUFBVCxNQUFNLEVBQUU7eURBQTJDO0lBRVQ7UUFBMUMsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztzREFBNkI7SUFuQzVELFlBQVk7UUFQeEIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLEtBQUs7WUFDZixRQUFRLEVBQUUsUUFBUTtZQUNsQixxWEFBbUM7WUFFbkMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O1NBQ3RDLENBQUM7T0FDVyxZQUFZLENBMEV4QjtJQUFELG1CQUFDO0NBQUEsQUExRUQsSUEwRUM7U0ExRVksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnYnJhY2UnO1xuXG5pbXBvcnQgJ2JyYWNlL21vZGUvdGV4dCc7XG5pbXBvcnQgJ2JyYWNlL3RoZW1lL2dpdGh1Yic7XG5cbmltcG9ydCB7IENvbXBvbmVudCxcbiAgQWZ0ZXJWaWV3SW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLFxuICBWaWV3Q2hpbGQsIEhvc3RCaW5kaW5nLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBY2VEaXJlY3RpdmUgfSBmcm9tICcuL2FjZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQWNlQ29uZmlnSW50ZXJmYWNlIH0gZnJvbSAnLi9hY2UuaW50ZXJmYWNlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FjZScsXG4gIGV4cG9ydEFzOiAnbmd4QWNlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FjZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWyAnLi9hY2UuY29tcG9uZW50LmNzcycgXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBBY2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBjb250ZW50OiBzdHJpbmcgPSAnJztcblxuICBASW5wdXQoKVxuICBnZXQgdmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50O1xuICB9XG4gIHNldCB2YWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zZXRDb250ZW50KHZhbHVlKTtcbiAgfVxuXG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQElucHV0KCkgbW9kZTogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIHRoZW1lOiBzdHJpbmcgPSAnJztcblxuICBASW5wdXQoKSBjb25maWc/OiBBY2VDb25maWdJbnRlcmZhY2U7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY2UnKVxuICBASW5wdXQoKSB1c2VBY2VDbGFzczogYm9vbGVhbiA9IHRydWU7XG5cbiAgQE91dHB1dCgpIGJsdXIgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIGZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgpIGNvcHkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIHBhc3RlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIEBPdXRwdXQoKSBjaGFuZ2VDdXJzb3IgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIGNoYW5nZVNlc3Npb24gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIGNoYW5nZVNlbGVjdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBWaWV3Q2hpbGQoQWNlRGlyZWN0aXZlLCB7IHN0YXRpYzogdHJ1ZSB9KSBkaXJlY3RpdmVSZWY/OiBBY2VEaXJlY3RpdmU7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb250ZW50ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuc2V0Q29udGVudCh0aGlzLmNvbnRlbnQsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0Q29udGVudCh2YWx1ZTogc3RyaW5nLCBmb3JjZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoZm9yY2UgfHwgdmFsdWUgIT09IHRoaXMuY29udGVudCkge1xuICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlUmVmKSB7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlUmVmLnNldFZhbHVlKHZhbHVlLCAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb250ZW50ID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldENvbmZpZygpOiBBY2VDb25maWdJbnRlcmZhY2Uge1xuICAgIHRoaXMuY29uZmlnID0gdGhpcy5jb25maWcgfHzCoHt9O1xuXG4gICAgdGhpcy5jb25maWcubW9kZSA9IHRoaXMubW9kZSB8fCB0aGlzLmNvbmZpZy5tb2RlO1xuXG4gICAgdGhpcy5jb25maWcudGhlbWUgPSB0aGlzLnRoZW1lIHx8IHRoaXMuY29uZmlnLnRoZW1lO1xuXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG5cbiAgcHVibGljIG9uQ29udGVudENoYW5nZShldmVudDogYW55KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGlyZWN0aXZlUmVmKSB7XG4gICAgICB0aGlzLmNoYW5nZS5lbWl0KGV2ZW50KTtcblxuICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy5kaXJlY3RpdmVSZWYuZ2V0VmFsdWUoKSB8fCAnJztcblxuICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIl19
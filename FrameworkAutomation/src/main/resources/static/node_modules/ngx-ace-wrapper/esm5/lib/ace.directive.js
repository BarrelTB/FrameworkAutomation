import { __decorate, __param } from "tslib";
import * as ace from 'brace';
import { Directive, Optional, Inject, OnInit, DoCheck, OnDestroy, OnChanges, Input, Output, EventEmitter, NgZone, ElementRef, KeyValueDiffer, KeyValueDiffers, SimpleChanges } from '@angular/core';
import { ACE_CONFIG, AceConfig, AceEditorEvents, AceSelectionEvents } from './ace.interfaces';
var AceDirective = /** @class */ (function () {
    function AceDirective(zone, elementRef, differs, defaults) {
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.defaults = defaults;
        this.instance = null;
        this.configDiff = null;
        this.disabled = false;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.copy = new EventEmitter();
        this.paste = new EventEmitter();
        this.change = new EventEmitter();
        this.changeCursor = new EventEmitter();
        this.changeSession = new EventEmitter();
        this.changeSelection = new EventEmitter();
    }
    AceDirective.prototype.ngOnInit = function () {
        var _this = this;
        var params = new AceConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        if (this.disabled) {
            params.readOnly = true;
            params.highlightActiveLine = false;
        }
        params.mode = 'ace/mode/' + (params.mode || 'text');
        params.theme = 'ace/theme/' + (params.theme || 'github');
        this.zone.runOutsideAngular(function () {
            _this.instance = ace.edit(_this.elementRef.nativeElement);
            _this.instance.$blockScrolling = Infinity;
            _this.instance.setOptions(params);
        });
        // Add native Ace event handling
        AceEditorEvents.forEach(function (eventName) {
            if (_this.instance) {
                _this.instance.on(eventName, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (_this[eventName]) {
                        _this.zone.run(function () {
                            if (_this[eventName].observers.length) {
                                _this[eventName].emit(args);
                            }
                        });
                    }
                });
            }
        });
        // Add native Ace selection event handling
        AceSelectionEvents.forEach(function (eventName) {
            if (_this.instance) {
                _this.instance.selection.on(eventName, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (args.length === 1) {
                        args = args[0];
                    }
                    if (_this[eventName]) {
                        if (_this[eventName].observers.length) {
                            _this[eventName].emit(args);
                        }
                    }
                });
            }
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    };
    AceDirective.prototype.ngDoCheck = function () {
        if (this.configDiff) {
            var changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    };
    AceDirective.prototype.ngOnDestroy = function () {
        if (this.instance) {
            if (this.instance.isFocused()) {
                this.blur.emit();
            }
            delete this.instance;
            this.instance = null;
        }
    };
    AceDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                this.zone.runOutsideAngular(function () {
                    if (_this.instance) {
                        var params = new AceConfig(_this.defaults);
                        params.assign(_this.config); // Custom configuration
                        _this.instance.clearSelection();
                        var hlActive = (params.highlightActiveLine == null) ? true : false;
                        _this.instance.setHighlightActiveLine(_this.disabled ? false : hlActive);
                        _this.instance.setReadOnly(_this.disabled ? true : (params.readOnly || false));
                    }
                });
            }
        }
    };
    AceDirective.prototype.ace = function () {
        return this.instance;
    };
    AceDirective.prototype.clear = function () {
        if (this.instance) {
            this.instance.setValue('');
            this.instance.clearSelection();
        }
    };
    AceDirective.prototype.getValue = function () {
        if (this.instance) {
            return this.instance.getValue();
        }
    };
    AceDirective.prototype.setValue = function (value, cursorPos) {
        if (this.instance) {
            this.instance.setValue(value || '', cursorPos);
        }
    };
    AceDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: KeyValueDiffers },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ACE_CONFIG,] }] }
    ]; };
    __decorate([
        Input()
    ], AceDirective.prototype, "disabled", void 0);
    __decorate([
        Input('ace')
    ], AceDirective.prototype, "config", void 0);
    __decorate([
        Output()
    ], AceDirective.prototype, "blur", void 0);
    __decorate([
        Output()
    ], AceDirective.prototype, "focus", void 0);
    __decorate([
        Output()
    ], AceDirective.prototype, "copy", void 0);
    __decorate([
        Output()
    ], AceDirective.prototype, "paste", void 0);
    __decorate([
        Output()
    ], AceDirective.prototype, "change", void 0);
    __decorate([
        Output()
    ], AceDirective.prototype, "changeCursor", void 0);
    __decorate([
        Output()
    ], AceDirective.prototype, "changeSession", void 0);
    __decorate([
        Output()
    ], AceDirective.prototype, "changeSelection", void 0);
    AceDirective = __decorate([
        Directive({
            selector: '[ace]',
            exportAs: 'ngxAce'
        }),
        __param(3, Optional()), __param(3, Inject(ACE_CONFIG))
    ], AceDirective);
    return AceDirective;
}());
export { AceDirective };
//# sourceMappingURL=data:application/json;base64,
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('brace'), require('brace/mode/text'), require('brace/theme/github'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-ace-wrapper', ['exports', 'brace', 'brace/mode/text', 'brace/theme/github', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-ace-wrapper'] = {}, global.brace, null, null, global.ng.core, global.ng.common));
}(this, (function (exports, brace, text, github, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var ACE_CONFIG = new core.InjectionToken('ACE_CONFIG');
    var AceEditorEvents = [
        'blur',
        'focus',
        'copy',
        'paste',
        'change',
        'changeSession'
    ];
    var AceSelectionEvents = [
        'changeCursor',
        'changeSelection'
    ];
    var AceConfig = /** @class */ (function () {
        function AceConfig(config) {
            if (config === void 0) { config = {}; }
            this.assign(config);
        }
        AceConfig.prototype.assign = function (config, target) {
            if (config === void 0) { config = {}; }
            target = target || this;
            for (var key in config) {
                if (config[key] && !Array.isArray(config[key]) && typeof config[key] === 'object') {
                    target[key] = {};
                    this.assign(config[key], target[key]);
                }
                else {
                    target[key] = config[key];
                }
            }
        };
        return AceConfig;
    }());

    var AceDirective = /** @class */ (function () {
        function AceDirective(zone, elementRef, differs, defaults) {
            this.zone = zone;
            this.elementRef = elementRef;
            this.differs = differs;
            this.defaults = defaults;
            this.instance = null;
            this.configDiff = null;
            this.disabled = false;
            this.blur = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.copy = new core.EventEmitter();
            this.paste = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.changeCursor = new core.EventEmitter();
            this.changeSession = new core.EventEmitter();
            this.changeSelection = new core.EventEmitter();
        }
        AceDirective.prototype.ngOnInit = function () {
            var _this = this;
            var params = new AceConfig(this.defaults);
            params.assign(this.config); // Custom configuration
            if (this.disabled) {
                params.readOnly = true;
                params.highlightActiveLine = false;
            }
            params.mode = 'ace/mode/' + (params.mode || 'text');
            params.theme = 'ace/theme/' + (params.theme || 'github');
            this.zone.runOutsideAngular(function () {
                _this.instance = brace.edit(_this.elementRef.nativeElement);
                _this.instance.$blockScrolling = Infinity;
                _this.instance.setOptions(params);
            });
            // Add native Ace event handling
            AceEditorEvents.forEach(function (eventName) {
                if (_this.instance) {
                    _this.instance.on(eventName, function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        if (args.length === 1) {
                            args = args[0];
                        }
                        if (_this[eventName]) {
                            _this.zone.run(function () {
                                if (_this[eventName].observers.length) {
                                    _this[eventName].emit(args);
                                }
                            });
                        }
                    });
                }
            });
            // Add native Ace selection event handling
            AceSelectionEvents.forEach(function (eventName) {
                if (_this.instance) {
                    _this.instance.selection.on(eventName, function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        if (args.length === 1) {
                            args = args[0];
                        }
                        if (_this[eventName]) {
                            if (_this[eventName].observers.length) {
                                _this[eventName].emit(args);
                            }
                        }
                    });
                }
            });
            if (!this.configDiff) {
                this.configDiff = this.differs.find(this.config || {}).create();
                this.configDiff.diff(this.config || {});
            }
        };
        AceDirective.prototype.ngDoCheck = function () {
            if (this.configDiff) {
                var changes = this.configDiff.diff(this.config || {});
                if (changes) {
                    this.ngOnDestroy();
                    this.ngOnInit();
                }
            }
        };
        AceDirective.prototype.ngOnDestroy = function () {
            if (this.instance) {
                if (this.instance.isFocused()) {
                    this.blur.emit();
                }
                delete this.instance;
                this.instance = null;
            }
        };
        AceDirective.prototype.ngOnChanges = function (changes) {
            var _this = this;
            if (changes['disabled']) {
                if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                    this.zone.runOutsideAngular(function () {
                        if (_this.instance) {
                            var params = new AceConfig(_this.defaults);
                            params.assign(_this.config); // Custom configuration
                            _this.instance.clearSelection();
                            var hlActive = (params.highlightActiveLine == null) ? true : false;
                            _this.instance.setHighlightActiveLine(_this.disabled ? false : hlActive);
                            _this.instance.setReadOnly(_this.disabled ? true : (params.readOnly || false));
                        }
                    });
                }
            }
        };
        AceDirective.prototype.ace = function () {
            return this.instance;
        };
        AceDirective.prototype.clear = function () {
            if (this.instance) {
                this.instance.setValue('');
                this.instance.clearSelection();
            }
        };
        AceDirective.prototype.getValue = function () {
            if (this.instance) {
                return this.instance.getValue();
            }
        };
        AceDirective.prototype.setValue = function (value, cursorPos) {
            if (this.instance) {
                this.instance.setValue(value || '', cursorPos);
            }
        };
        AceDirective.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: core.ElementRef },
            { type: core.KeyValueDiffers },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [ACE_CONFIG,] }] }
        ]; };
        __decorate([
            core.Input()
        ], AceDirective.prototype, "disabled", void 0);
        __decorate([
            core.Input('ace')
        ], AceDirective.prototype, "config", void 0);
        __decorate([
            core.Output()
        ], AceDirective.prototype, "blur", void 0);
        __decorate([
            core.Output()
        ], AceDirective.prototype, "focus", void 0);
        __decorate([
            core.Output()
        ], AceDirective.prototype, "copy", void 0);
        __decorate([
            core.Output()
        ], AceDirective.prototype, "paste", void 0);
        __decorate([
            core.Output()
        ], AceDirective.prototype, "change", void 0);
        __decorate([
            core.Output()
        ], AceDirective.prototype, "changeCursor", void 0);
        __decorate([
            core.Output()
        ], AceDirective.prototype, "changeSession", void 0);
        __decorate([
            core.Output()
        ], AceDirective.prototype, "changeSelection", void 0);
        AceDirective = __decorate([
            core.Directive({
                selector: '[ace]',
                exportAs: 'ngxAce'
            }),
            __param(3, core.Optional()), __param(3, core.Inject(ACE_CONFIG))
        ], AceDirective);
        return AceDirective;
    }());

    var AceComponent = /** @class */ (function () {
        function AceComponent() {
            this.content = '';
            this.disabled = false;
            this.mode = '';
            this.theme = '';
            this.useAceClass = true;
            this.blur = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.copy = new core.EventEmitter();
            this.paste = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.valueChange = new core.EventEmitter();
            this.changeCursor = new core.EventEmitter();
            this.changeSession = new core.EventEmitter();
            this.changeSelection = new core.EventEmitter();
        }
        Object.defineProperty(AceComponent.prototype, "value", {
            get: function () {
                return this.content;
            },
            set: function (value) {
                this.setContent(value);
            },
            enumerable: true,
            configurable: true
        });
        AceComponent.prototype.ngAfterViewInit = function () {
            if (this.content != null) {
                this.setContent(this.content, true);
            }
        };
        AceComponent.prototype.setContent = function (value, force) {
            if (force || value !== this.content) {
                if (this.directiveRef) {
                    this.directiveRef.setValue(value, 1);
                }
                this.content = value;
            }
        };
        AceComponent.prototype.getConfig = function () {
            this.config = this.config || {};
            this.config.mode = this.mode || this.config.mode;
            this.config.theme = this.theme || this.config.theme;
            return this.config;
        };
        AceComponent.prototype.onContentChange = function (event) {
            if (this.directiveRef) {
                this.change.emit(event);
                this.content = this.directiveRef.getValue() || '';
                this.valueChange.emit(this.value);
            }
        };
        __decorate([
            core.Input()
        ], AceComponent.prototype, "value", null);
        __decorate([
            core.Input()
        ], AceComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input()
        ], AceComponent.prototype, "mode", void 0);
        __decorate([
            core.Input()
        ], AceComponent.prototype, "theme", void 0);
        __decorate([
            core.Input()
        ], AceComponent.prototype, "config", void 0);
        __decorate([
            core.HostBinding('class.ace'),
            core.Input()
        ], AceComponent.prototype, "useAceClass", void 0);
        __decorate([
            core.Output()
        ], AceComponent.prototype, "blur", void 0);
        __decorate([
            core.Output()
        ], AceComponent.prototype, "focus", void 0);
        __decorate([
            core.Output()
        ], AceComponent.prototype, "copy", void 0);
        __decorate([
            core.Output()
        ], AceComponent.prototype, "paste", void 0);
        __decorate([
            core.Output()
        ], AceComponent.prototype, "change", void 0);
        __decorate([
            core.Output()
        ], AceComponent.prototype, "valueChange", void 0);
        __decorate([
            core.Output()
        ], AceComponent.prototype, "changeCursor", void 0);
        __decorate([
            core.Output()
        ], AceComponent.prototype, "changeSession", void 0);
        __decorate([
            core.Output()
        ], AceComponent.prototype, "changeSelection", void 0);
        __decorate([
            core.ViewChild(AceDirective, { static: true })
        ], AceComponent.prototype, "directiveRef", void 0);
        AceComponent = __decorate([
            core.Component({
                selector: 'ace',
                exportAs: 'ngxAce',
                template: "<div [ace]=\"getConfig()\" [disabled]=\"disabled\" (blur)=\"blur.emit($event)\" (focus)=\"focus.emit($event)\" (copy)=\"copy.emit($event)\" (paste)=\"paste.emit($event)\" (change)=\"onContentChange($event)\" (changeCursor)=\"changeCursor.emit($event)\" (changeSession)=\"changeSession.emit($event)\" (changeSelection)=\"changeSelection.emit($event)\">\n</div>\n",
                encapsulation: core.ViewEncapsulation.None,
                styles: [".ace,.ace>.ace_editor{display:block;width:100%;height:100%}.ace[fxflex]{display:-webkit-box;display:flex;flex-direction:inherit;-webkit-box-align:inherit;align-items:inherit;min-width:0;min-height:0;-webkit-box-direction:inherit;-webkit-box-orient:inherit}.ace[fxflex]>.ace_editor{flex:1 1 auto;min-width:0;min-height:0;-webkit-box-flex:1}"]
            })
        ], AceComponent);
        return AceComponent;
    }());

    var AceModule = /** @class */ (function () {
        function AceModule() {
        }
        AceModule = __decorate([
            core.NgModule({
                declarations: [AceComponent, AceDirective],
                imports: [common.CommonModule],
                exports: [common.CommonModule, AceComponent, AceDirective],
                providers: []
            })
        ], AceModule);
        return AceModule;
    }());

    exports.ACE_CONFIG = ACE_CONFIG;
    exports.AceComponent = AceComponent;
    exports.AceConfig = AceConfig;
    exports.AceDirective = AceDirective;
    exports.AceModule = AceModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-ace-wrapper.umd.js.map
